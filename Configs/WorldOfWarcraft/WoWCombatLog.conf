input {
    file {
        path => "/srv/logstash-1.4.2/WoWCombatLog.txt"
        sincedb_path => '/dev/null'
        type => 'WoWCombatLog'
        start_position => 'beginning'
    }
}

# Problem Events: 
# SPELL_DAMAGE - SPELL_HEAL - SWING_DAMAGE - SPELL_PERIODIC_DAMAGE - SPELL_ENERGIZE - SPELL_PERIODIC_HEAL - RANGE_DAMAGE
# 

# Without Problem Events:
# SPELL_AURA_REMOVED - SPELL_AURA_APPLIED - SPELL_CAST_SUCCESS - SPELL_AURA_REFRESH - SPELL_CAST_START - SPELL_AURA_APPLIED_DOSE
# SWING_MISSED - SPELL_MISSED - SPELL_ABSORBED - SPELL_CAST_FAILED - SPELL_RESURRECT - UNIT_DESTROYED - SPELL_AURA_REMOVED_DOSE
# SPELL_CREATE - UNIT_DIED - SPELL_SUMMON 

filter {
    # Start by pulling the timestamp out from the log line
    grok {
	match => ["message", "%{WOWCL_TIMESTAMP:timestamp}%{SPACE}%{GREEDYDATA:rawevent}"]
    }
    # Parse the date
    date {
	match => ["timestamp", "MM/dd HH:mm:ss.SSS"]
    }
    # Split the data into two parts, we need to handle the second set based on the event type.
    ruby {
	code => 'event["pdata"], event["sdata"] = [event["rawevent"].split(",")].inject([]) {|r, v| [v[0..8].join(","), v[9..-1].join(",")]}'
    }
    # Parse the log line using CSV
    csv {
	# http://wowpedia.org/API_COMBAT_LOG_EVENT
	columns => ["event", "sourceGUID", "SourceName", "sourceFlags", "sourceRaidFlags", "destGUID", "destName", "destFlags", "destRaidFlags"]
	source => "pdata"
	remove_field => "pdata"
	converters => ["all"]
    }
    # First we need to look at the starting of the event to determine the next set of fields to pull
    if [event] =~ /^RANGE/  or [event] =~ /^SPELL/ or [event] =~ /^DAMAGE"/ {
	ruby {
	    code => 'event["prdata"], event["sudata"] = [event["sdata"].split(",")].inject([]) {|r, v| [v[0..2].join(","), v[3..-1].join(",")]}'
	}
	mutate {
	    remove_field => "sdata"
	}
        csv {
	    columns => ["spellId", "SpellName", "SpellSchool"]
	    source => "prdata"
	    remove_field => "prdata"
	    converters => ["all"]
	}
    } else {
	# We don't have any prefix data, so we need to move prdata into sudata for suffix data
	mutate {
	    rename => ['sdata', 'sudata']
	}
    } 
    # Some events have a bunch of extra data we need to parse, lets pull them out
    if [event] =~ /_DAMAGE$/ or [event] =~ /_DAMAGE_LANDED$/ or [event] =~ /_HEAL$/ or [event] =~ /_ENERGIZE$/ {
	ruby {
	    code => 'event["xdata"], event["sudata"] = [event["sudata"].split(",")].inject([]) {|r, v| [v[0..11].join(","), v[12..-1].join(",")]}'
	}
        csv {
	    columns => ["guid", "unknown0", "currenthealth", "maxhealth", "attackpower", "spellpower", "unknown1", "powertype", "currentpower", "maxpower", "xLoc", "yLoc", "itemlevel"]
	    source => "xdata"
	    remove_field => "xdata"
	    converters => ["all"]
	}
    }
    # Enviromental event has it's prefix data after the xdata above. 
    if [event] =~ /^ENVIRONMENTAL/ {
	ruby {
	    code => 'event["prdata"], event["sudata"] = [event["sudata"].split(",")].inject([]) {|r, v| [v[0..0].join(","), v[1..-1].join(",")]}'
	}
        csv {
	    columns => ["environmentalType"]
	    source => "prdata"
	    remove_field => "prdata"
	    converters => ["all"]
	}
    }
    # Next, we look at the ending of the event to gather the last fields
    # We'll put the most used at the top
    if [event] =~ /_DAMAGE$/ or [event] =~ /_DAMAGE_LANDED$/ {
        csv {
	    columns => ["amount", "overkill", "school", "resisted", "blocked", "absorbed", "critical", "glancing", "crushing", "unknown2"]
	    source => "sudata"
	    remove_field => "sudata"
	    converters => ["all"]
	}
    } else if [event] =~ /_HEAL$/ {
        csv {
	    columns => ["amount", "overhealing", "absorbed", "critical", "unknown2"]
	    source => "sudata"
	    remove_field => "sudata"
	    converters => ["all"]
	}
    } else if [event] =~ /_MISSED$/ {
        csv {
	    columns => ["missType", "isOffHand", "unknown", "amountMissed"]
	    source => "sudata"
	    remove_field => "sudata"
	    converters => ["all"]
	}
    } else if [event] =~ /_AURA_BROKEN_SPELL$/ or [event] =~ /_STOLEN$/ or [event] =~ /_DISPEL$/ or [event] =~ /_DISPEL_FAILED$/ or [event] =~ /_INTERRUPT$/ {
        csv {
	    columns => ["amount", "overkill", "school", "resisted", "blocked", "absorbed", "critical", "glancing", "crushing"]
	    source => "sudata"
	    remove_field => "sudata"
	    converters => ["all"]
	}
    } else if [event] =~ /_AURA_REFRESH$/ or [event] =~ /_AURA_REMOVED_DOSE$/ or [event] =~ /_AURA_APPLIED_DOSE$/ or [event] =~ /_AURA_REMOVED$/ or [event] =~ /_AURA_APPLIED$/ or [event] =~ /_AURA_BROKEN$/ {
        csv {
	    columns => ["extraSpellId", "extraSpellName", "extraSchool", "auraType"]
	    source => "sudata"
	    remove_field => "sudata"
	    converters => ["all"]
	}
    } else if [event] =~ /_LEECH$/ or [event] =~ /_DRAIN$/ or [event] =~ /_ENERGIZE$/ { 
        csv {
	    columns => ["amount", "powerType", "extraAmount"]
	    source => "sudata"
	    remove_field => "sudata"
	    converters => ["all"]
	}
    } else if [event] =~ /_CAST_FAILED$/ {
        csv {
	    columns => ["failedType"]
	    source => "sudata"
	    remove_field => "sudata"
	    converters => ["all"]
	}
    }
}


output {
    if [event] =~ /DAMAGE$/ {
	stdout { codec => "rubydebug" }
    }
}