input {
    generator {
        # We use generator to generate the event, but one would normally use TCP/UDP.
        type => "generated"
        message => "<150>May 08 10:18:18 host1399558698 service: my special message goes here"
        count => 1
    }
}

filter {
    # Pull out the Syslog Priority
    grok {
        match => ['message', "<%{INT:syslog_pri}>"]
    }

    # Convert the syslog priority it to human readable
    syslog_pri { }

    # Move the Syslog Message into a new field named syslog_message (to capture the original)
    mutate {
        rename => ["message", "syslog_message"]
    }

    # Apply the SYSLOG GROK to the message to parse out the syslog headers, then place the left overs
    # in message where we expect it to be.
    grok {
        match => ["syslog_message", "%{SYSLOGBASE} %{GREEDYDATA:message}"]
    }

    mutate {
        rename => ["@timestamp", "parse_timestamp"]
    }

    date {
        # May 08 10:18:18
        match => ["timestamp", "MMM dd HH:mm:ss"]
        # We don't have a timezone on the log, so we can define it.
        timezone => "America/Toronto"
    }
}

output {
    stdout { codec => rubydebug }
}
